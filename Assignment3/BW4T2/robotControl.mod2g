use bw4tKnowledge.

% Control module for robot decision-making.

module robotControl {

	% Rule to drop a bloSck in the DropZone.
	if holding(BlockID), not(state(traveling)),
	   in('DropZone')
  	   then putDown + delete( holding(BlockID) ).
	   
	% Rule to go to the DropZone if holding a block.
	if holding(_),
	   not(in('DropZone')),
	   not(state(traveling))
	   then goTo('DropZone').	
	   
	% Rule to pick up a block of the needed color.
	if next_color_needed(ColorID),
	   block(BlockID, ColorID, _),
	   atBlock(BlockID),
	   not(holding(_))
	   then pickUp(BlockID).	      
	   
	% Rule to move closer to a block of the needed color.
	if next_color_needed(ColorID),
	   block(BlockID, ColorID, PlaceID),
	   in(PlaceID),
	   not( holding(_) ),
	   not(state(traveling))
	   then goToBlock(BlockID).
	
	% Added rule to move closer to a block of the needed color.
	if next_color_needed(ColorID),
	   block(_, ColorID, PlaceID),
	   not( in(PlaceID) ),
	   not(state(traveling))
	   then goTo(PlaceID).
	   
	   
	% Rule to go to a room that has not been visited.
	if not_yet_visited(PlaceID), not(state(traveling))
		then goTo(PlaceID).
		
	if sequence(ListA), 
		sequenceIndex(I), 
		length(ListA, LenA), 
		CurrI is I + 1, 
		LenA == CurrI 
		then exit-module.
			
		

}
